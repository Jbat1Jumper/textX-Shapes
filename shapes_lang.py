from textx import metamodel_from_str, get_children_of_type
from jinja2 import Template

grammar = """
Model: Canvas;
Canvas: 'Painting' name=ID shapes*=Shape ;
Shape: Square | Circle ;
Circle: 'circle' 'x:' x=INT 'y:' y=INT 'r:' radius=INT 'color:' color=Color ;
Square: 'square' 'x:' x=INT 'y:' y=INT 's:' size=INT 'color:' color=Color ;
Color: 'blue' | 'red' | 'green' | 'white' | 'black' ;
"""

class Canvas:
    def __init__(self, name, shapes):
        self.name = name
        self.shapes = shapes

    def to_java(self):
        return Template(self.template).render(model=self)
        
Canvas.template = """
package Shapes.sandbox;

/*Generated by textX */

import javax.swing.JFrame;
import javax.swing.JPanel;
import java.awt.Graphics;
import java.awt.Color;
import java.awt.Dimension;

public class {{model.name}} extends JFrame {

  private JPanel panel = new JPanel() {
    @Override
    public void paintComponents(Graphics graphics) {
      super.paintComponents(graphics);
      {% for shape in model.shapes %}
      {{ shape.to_java() }}
      {% endfor %}
    }
  };

  public void initialize() {
    this.setTitle("{{model.name}}");
    this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    this.add(panel);
    panel.setPreferredSize(new Dimension(500, 500));
    this.pack();
    this.setVisible(true);
  }

  public static void main(String[] args) {
    PicassoDrawing canvas = new PicassoDrawing();
    canvas.initialize();
  }
}
"""

class Square:
    def __init__(self, parent, x, y, size, color):
        self.parent = parent
        self.x = x
        self.y = y
        self.size = size
        self.color = color

    def to_java(self):
        return Template(self.template).render(model=self)
        
Square.template = """
    graphics.setColor(Color.{{model.color}});
    graphics.drawRect({{model.x}}, {{model.y}}, {{model.size}}, {{model.size}});
"""

class Circle:
    def __init__(self, parent, x, y, radius, color):
        self.parent = parent
        self.x = x
        self.y = y
        self.radius = radius
        self.color = color

    def to_java(self):
        return Template(self.template).render(model=self)

Circle.template = """
    graphics.setColor(Color.{{model.color}});
    graphics.drawOval({{model.x}}, {{model.y}}, {{model.radius}}, {{model.radius}});
"""

mm = metamodel_from_str(grammar, classes=[Canvas, Square, Circle])

with open("picasso.painting", "r") as src:
    with open("picasso.java", "w") as dst:
        model = mm.model_from_str(src.read())
        dst.write(model.to_java())
